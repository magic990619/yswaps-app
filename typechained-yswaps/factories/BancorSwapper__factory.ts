/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BytesLike } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { BancorSwapper, BancorSwapperInterface } from '../BancorSwapper';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_governor',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_tradeFactory',
        type: 'address',
      },
      {
        internalType: 'contract IContractRegistry',
        name: '_contractRegistry',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '_bancorNetworkName',
        type: 'bytes32',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NotAuthorized',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ZeroAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ZeroAmount',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'DustSent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'GovernorAccepted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'pendingGovernor',
        type: 'address',
      },
    ],
    name: 'PendingGovernorSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_tradeFactory',
        type: 'address',
      },
    ],
    name: 'TradeFactorySet',
    type: 'event',
  },
  {
    inputs: [],
    name: 'ETH_ADDRESS',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'SLIPPAGE_PRECISION',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'SWAPPER_TYPE',
    outputs: [
      {
        internalType: 'enum ISwapper.SwapperType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptGovernor',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'bancorNetworkName',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'contractRegistry',
    outputs: [
      {
        internalType: 'contract IContractRegistry',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address',
      },
    ],
    name: 'isGovernor',
    outputs: [
      {
        internalType: 'bool',
        name: '_isGovernor',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingGovernor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'sendDust',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_pendingGovernor',
        type: 'address',
      },
    ],
    name: 'setPendingGovernor',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_tradeFactory',
        type: 'address',
      },
    ],
    name: 'setTradeFactory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_receiver',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_tokenIn',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_tokenOut',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amountIn',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_maxSlippage',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_data',
        type: 'bytes',
      },
    ],
    name: 'swap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tradeFactory',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60e06040526127106080523480156200001757600080fd5b506040516200143c3803806200143c8339810160408190526200003a9162000136565b838380826001600160a01b038116620000b05760405162461bcd60e51b815260206004820152602e60248201527f676f7665726e61626c652f676f7665726e6f722d73686f756c642d6e6f742d6260448201526d652d7a65726f2d6164647265737360901b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b039283161790558116620000ec5760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b039283161790559390931660a0525060c0525062000190915050565b6001600160a01b03811681146200013357600080fd5b50565b600080600080608085870312156200014d57600080fd5b84516200015a816200011d565b60208601519094506200016d816200011d565b604086015190935062000180816200011d565b6060959095015193969295505050565b60805160a05160c051611267620001d5600039600081816101eb01526106760152600081816101af015261069f015260008181610139015261083601526112676000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063cd985af01161008c578063e43581b811610066578063e43581b814610220578063e58bb63914610252578063e5e19b4a1461025a578063f235757f1461026d57600080fd5b8063cd985af0146101d1578063e26a98f8146101e6578063e3056a341461020d57600080fd5b806365210942116100c85780636521094214610169578063a5d4096b1461017c578063a734f06e1461018f578063abf410e5146101aa57600080fd5b80630c340a24146100ef5780632db8c1291461011f578063453943f014610134575b600080fd5b600054610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013261012d366004610dfb565b610280565b005b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610116565b610132610177366004610e3c565b6102c3565b61013261018a366004610e59565b610369565b61010273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101027f000000000000000000000000000000000000000000000000000000000000000081565b6101d9600181565b6040516101169190610f17565b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b600154610102906001600160a01b031681565b61024261022e366004610e3c565b6000546001600160a01b0391821691161490565b6040519015158152602001610116565b6101326103b9565b600454610102906001600160a01b031681565b61013261027b366004610e3c565b61041d565b6000546001600160a01b031633146102b35760405162461bcd60e51b81526004016102aa90610f3f565b60405180910390fd5b6102be838383610453565b505050565b6000546001600160a01b031633146102ed5760405162461bcd60e51b81526004016102aa90610f3f565b6001600160a01b0381166103145760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fbda986fea33634f76bd215bacd0d368610edf55143c3ca42bd0f55040ad870b5906020015b60405180910390a150565b6004546001600160a01b031633146103945760405163ea8e4eb560e01b815260040160405180910390fd5b6103a187878787876105f5565b6103b087878787878787610667565b50505050505050565b6001546001600160a01b031633146104135760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f7260448201526064016102aa565b61041b610a2a565b565b6000546001600160a01b031633146104475760405162461bcd60e51b81526004016102aa90610f3f565b61045081610a7a565b50565b6001600160a01b0383166104c15760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b60648201526084016102aa565b6104cc600283610b3c565b156105305760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b60648201526084016102aa565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610591576040516001600160a01b0384169082156108fc029083906000818181858888f1935050505015801561058b573d6000803e3d6000fd5b506105a5565b6105a56001600160a01b0383168483610b61565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b6001600160a01b038516158061061257506001600160a01b038416155b8061062457506001600160a01b038316155b156106425760405163d92e233d60e01b815260040160405180910390fd5b8161066057604051631f2a200560e01b815260040160405180910390fd5b5050505050565b604051632ecd14d360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bb34534c90602401602060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190610f86565b60405163d734fa1960e01b81526001600160a01b038981166004830152888116602483015291925060009183169063d734fa199060440160006040518083038186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ae9190810190610fb9565b90506000826001600160a01b0316637f9c0ecd83896040518363ffffffff1660e01b81526004016107e09291906110c2565b60206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906110e4565b905060647f000000000000000000000000000000000000000000000000000000000000000061085f8884611113565b6108699190611132565b6108739190611132565b61087d9082611154565b60405163095ea7b360e01b81526001600160a01b03858116600483015260006024830152919250908a169063095ea7b390604401602060405180830381600087803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610903919061116b565b5060405163095ea7b360e01b81526001600160a01b038481166004830152602482018990528a169063095ea7b390604401602060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061116b565b50610a1e8a846001600160a01b031663f3898a97858b866040518463ffffffff1660e01b81526004016109bb9392919061118d565b602060405180830381600087803b1580156109d557600080fd5b505af11580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d91906110e4565b6001600160a01b038b169190610b61565b50505050505050505050565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea9190a1565b6001600160a01b038116610aee5760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b60648201526084016102aa565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200161035e565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526102be92869291600091610bf1918516908490610c6e565b8051909150156102be5780806020019051810190610c0f919061116b565b6102be5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102aa565b6060610c7d8484600085610c85565b949350505050565b606082471015610ce65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102aa565b843b610d345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102aa565b600080866001600160a01b03168587604051610d5091906111e2565b60006040518083038185875af1925050503d8060008114610d8d576040519150601f19603f3d011682016040523d82523d6000602084013e610d92565b606091505b5091509150610da2828286610dad565b979650505050505050565b60608315610dbc575081610b5a565b825115610dcc5782518084602001fd5b8160405162461bcd60e51b81526004016102aa91906111fe565b6001600160a01b038116811461045057600080fd5b600080600060608486031215610e1057600080fd5b8335610e1b81610de6565b92506020840135610e2b81610de6565b929592945050506040919091013590565b600060208284031215610e4e57600080fd5b8135610b5a81610de6565b600080600080600080600060c0888a031215610e7457600080fd5b8735610e7f81610de6565b96506020880135610e8f81610de6565b95506040880135610e9f81610de6565b9450606088013593506080880135925060a088013567ffffffffffffffff80821115610eca57600080fd5b818a0191508a601f830112610ede57600080fd5b813581811115610eed57600080fd5b8b6020828501011115610eff57600080fd5b60208301945080935050505092959891949750929550565b6020810160028310610f3957634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b8051610f8181610de6565b919050565b600060208284031215610f9857600080fd5b8151610b5a81610de6565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610fcc57600080fd5b825167ffffffffffffffff80821115610fe457600080fd5b818501915085601f830112610ff857600080fd5b81518181111561100a5761100a610fa3565b8060051b604051601f19603f8301168101818110858211171561102f5761102f610fa3565b60405291825284820192508381018501918883111561104d57600080fd5b938501935b828510156110725761106385610f76565b84529385019392850192611052565b98975050505050505050565b600081518084526020808501945080840160005b838110156110b75781516001600160a01b031687529582019590820190600101611092565b509495945050505050565b6040815260006110d5604083018561107e565b90508260208301529392505050565b6000602082840312156110f657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561112d5761112d6110fd565b500290565b60008261114f57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611166576111666110fd565b500390565b60006020828403121561117d57600080fd5b81518015158114610b5a57600080fd5b6060815260006111a0606083018661107e565b60208301949094525060400152919050565b60005b838110156111cd5781810151838201526020016111b5565b838111156111dc576000848401525b50505050565b600082516111f48184602087016111b2565b9190910192915050565b602081526000825180602084015261121d8160408501602087016111b2565b601f01601f1916919091016040019291505056fea26469706673582212206b7a2d9e88ab51cdf5672131e198bfcd7f5533fb9a870dcd97a287b834e99e2364736f6c63430008090033';

type BancorSwapperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: BancorSwapperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BancorSwapper__factory extends ContractFactory {
  constructor(...args: BancorSwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'BancorSwapper';
  }

  deploy(
    _governor: string,
    _tradeFactory: string,
    _contractRegistry: string,
    _bancorNetworkName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BancorSwapper> {
    return super.deploy(_governor, _tradeFactory, _contractRegistry, _bancorNetworkName, overrides || {}) as Promise<BancorSwapper>;
  }
  getDeployTransaction(
    _governor: string,
    _tradeFactory: string,
    _contractRegistry: string,
    _bancorNetworkName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_governor, _tradeFactory, _contractRegistry, _bancorNetworkName, overrides || {});
  }
  attach(address: string): BancorSwapper {
    return super.attach(address) as BancorSwapper;
  }
  connect(signer: Signer): BancorSwapper__factory {
    return super.connect(signer) as BancorSwapper__factory;
  }
  static readonly contractName: 'BancorSwapper';
  public readonly contractName: 'BancorSwapper';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BancorSwapperInterface {
    return new utils.Interface(_abi) as BancorSwapperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): BancorSwapper {
    return new Contract(address, _abi, signerOrProvider) as BancorSwapper;
  }
}
