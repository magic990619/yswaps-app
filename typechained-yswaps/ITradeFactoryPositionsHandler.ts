/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace ITradeFactoryPositionsHandler {
  export type EnabledTradeStruct = {
    _strategy: string;
    _tokenIn: string;
    _tokenOut: string;
  };

  export type EnabledTradeStructOutput = [string, string, string] & {
    _strategy: string;
    _tokenIn: string;
    _tokenOut: string;
  };
}

export interface ITradeFactoryPositionsHandlerInterface extends utils.Interface {
  contractName: 'ITradeFactoryPositionsHandler';
  functions: {
    'disable(address,address)': FunctionFragment;
    'disableByAdmin(address,address,address)': FunctionFragment;
    'enable(address,address)': FunctionFragment;
    'enabledTrades()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'disable', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'disableByAdmin', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'enable', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'enabledTrades', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableByAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enabledTrades', data: BytesLike): Result;

  events: {};
}

export interface ITradeFactoryPositionsHandler extends BaseContract {
  contractName: 'ITradeFactoryPositionsHandler';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITradeFactoryPositionsHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    disableByAdmin(
      _strategy: string,
      _tokenIn: string,
      _tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    enabledTrades(overrides?: CallOverrides): Promise<
      [ITradeFactoryPositionsHandler.EnabledTradeStructOutput[]] & {
        _enabledTrades: ITradeFactoryPositionsHandler.EnabledTradeStructOutput[];
      }
    >;
  };

  disable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  disableByAdmin(
    _strategy: string,
    _tokenIn: string,
    _tokenOut: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  enabledTrades(overrides?: CallOverrides): Promise<ITradeFactoryPositionsHandler.EnabledTradeStructOutput[]>;

  callStatic: {
    disable(_tokenIn: string, _tokenOut: string, overrides?: CallOverrides): Promise<void>;

    disableByAdmin(_strategy: string, _tokenIn: string, _tokenOut: string, overrides?: CallOverrides): Promise<void>;

    enable(_tokenIn: string, _tokenOut: string, overrides?: CallOverrides): Promise<void>;

    enabledTrades(overrides?: CallOverrides): Promise<ITradeFactoryPositionsHandler.EnabledTradeStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    disable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    disableByAdmin(
      _strategy: string,
      _tokenIn: string,
      _tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enabledTrades(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    disable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    disableByAdmin(
      _strategy: string,
      _tokenIn: string,
      _tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enable(_tokenIn: string, _tokenOut: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    enabledTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
