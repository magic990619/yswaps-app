/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ISolidlyFactoryInterface extends utils.Interface {
  contractName: 'ISolidlyFactory';
  functions: {
    'allPairsLength()': FunctionFragment;
    'createPair(address,address,bool)': FunctionFragment;
    'getPair(address,address,bool)': FunctionFragment;
    'isPair(address)': FunctionFragment;
    'pairCodeHash()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'allPairsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createPair', values: [string, string, boolean]): string;
  encodeFunctionData(functionFragment: 'getPair', values: [string, string, boolean]): string;
  encodeFunctionData(functionFragment: 'isPair', values: [string]): string;
  encodeFunctionData(functionFragment: 'pairCodeHash', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allPairsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pairCodeHash', data: BytesLike): Result;

  events: {};
}

export interface ISolidlyFactory extends BaseContract {
  contractName: 'ISolidlyFactory';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISolidlyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPair(tokenA: string, token: string, stable: boolean, overrides?: CallOverrides): Promise<[string]>;

    isPair(pair: string, overrides?: CallOverrides): Promise<[boolean]>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;
  };

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPair(tokenA: string, token: string, stable: boolean, overrides?: CallOverrides): Promise<string>;

  isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(tokenA: string, tokenB: string, stable: boolean, overrides?: CallOverrides): Promise<string>;

    getPair(tokenA: string, token: string, stable: boolean, overrides?: CallOverrides): Promise<string>;

    isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(tokenA: string, tokenB: string, stable: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getPair(tokenA: string, token: string, stable: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    isPair(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPair(tokenA: string, token: string, stable: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPair(pair: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
