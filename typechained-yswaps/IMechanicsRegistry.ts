/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IMechanicsRegistryInterface extends utils.Interface {
  contractName: 'IMechanicsRegistry';
  functions: {
    'addMechanic(address)': FunctionFragment;
    'isMechanic(address)': FunctionFragment;
    'mechanics()': FunctionFragment;
    'removeMechanic(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addMechanic', values: [string]): string;
  encodeFunctionData(functionFragment: 'isMechanic', values: [string]): string;
  encodeFunctionData(functionFragment: 'mechanics', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeMechanic', values: [string]): string;

  decodeFunctionResult(functionFragment: 'addMechanic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMechanic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mechanics', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMechanic', data: BytesLike): Result;

  events: {
    'MechanicAdded(address)': EventFragment;
    'MechanicRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MechanicAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MechanicRemoved'): EventFragment;
}

export type MechanicAddedEvent = TypedEvent<[string], { _mechanic: string }>;

export type MechanicAddedEventFilter = TypedEventFilter<MechanicAddedEvent>;

export type MechanicRemovedEvent = TypedEvent<[string], { _mechanic: string }>;

export type MechanicRemovedEventFilter = TypedEventFilter<MechanicRemovedEvent>;

export interface IMechanicsRegistry extends BaseContract {
  contractName: 'IMechanicsRegistry';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMechanicsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isMechanic(mechanic: string, overrides?: CallOverrides): Promise<[boolean] & { _isMechanic: boolean }>;

    mechanics(overrides?: CallOverrides): Promise<[string[]] & { _mechanicsList: string[] }>;

    removeMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  addMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  isMechanic(mechanic: string, overrides?: CallOverrides): Promise<boolean>;

  mechanics(overrides?: CallOverrides): Promise<string[]>;

  removeMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    addMechanic(_mechanic: string, overrides?: CallOverrides): Promise<void>;

    isMechanic(mechanic: string, overrides?: CallOverrides): Promise<boolean>;

    mechanics(overrides?: CallOverrides): Promise<string[]>;

    removeMechanic(_mechanic: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'MechanicAdded(address)'(_mechanic?: null): MechanicAddedEventFilter;
    MechanicAdded(_mechanic?: null): MechanicAddedEventFilter;

    'MechanicRemoved(address)'(_mechanic?: null): MechanicRemovedEventFilter;
    MechanicRemoved(_mechanic?: null): MechanicRemovedEventFilter;
  };

  estimateGas: {
    addMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    isMechanic(mechanic: string, overrides?: CallOverrides): Promise<BigNumber>;

    mechanics(overrides?: CallOverrides): Promise<BigNumber>;

    removeMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    addMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    isMechanic(mechanic: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mechanics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMechanic(_mechanic: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
