/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface GovernableInterface extends utils.Interface {
  contractName: 'Governable';
  functions: {
    'acceptGovernor()': FunctionFragment;
    'governor()': FunctionFragment;
    'isGovernor(address)': FunctionFragment;
    'pendingGovernor()': FunctionFragment;
    'setPendingGovernor(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptGovernor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'pendingGovernor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPendingGovernor', values: [string]): string;

  decodeFunctionResult(functionFragment: 'acceptGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingGovernor', data: BytesLike): Result;

  events: {
    'GovernorAccepted()': EventFragment;
    'PendingGovernorSet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'GovernorAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingGovernorSet'): EventFragment;
}

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter = TypedEventFilter<GovernorAcceptedEvent>;

export type PendingGovernorSetEvent = TypedEvent<[string], { pendingGovernor: string }>;

export type PendingGovernorSetEventFilter = TypedEventFilter<PendingGovernorSetEvent>;

export interface Governable extends BaseContract {
  contractName: 'Governable';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean] & { _isGovernor: boolean }>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    setPendingGovernor(_pendingGovernor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  acceptGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  setPendingGovernor(_pendingGovernor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    setPendingGovernor(_pendingGovernor: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'GovernorAccepted()'(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    'PendingGovernorSet(address)'(pendingGovernor?: null): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingGovernor(_pendingGovernor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingGovernor(_pendingGovernor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
