/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IUniswapV2SwapperInterface extends utils.Interface {
  contractName: 'IUniswapV2Swapper';
  functions: {
    'FACTORY()': FunctionFragment;
    'ROUTER()': FunctionFragment;
    'SWAPPER_TYPE()': FunctionFragment;
    'setTradeFactory(address)': FunctionFragment;
    'swap(address,address,address,uint256,uint256,bytes)': FunctionFragment;
    'tradeFactory()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'FACTORY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROUTER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SWAPPER_TYPE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setTradeFactory', values: [string]): string;
  encodeFunctionData(functionFragment: 'swap', values: [string, string, string, BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'tradeFactory', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'FACTORY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROUTER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SWAPPER_TYPE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTradeFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeFactory', data: BytesLike): Result;

  events: {
    'TradeFactorySet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'TradeFactorySet'): EventFragment;
}

export type TradeFactorySetEvent = TypedEvent<[string], { _tradeFactory: string }>;

export type TradeFactorySetEventFilter = TypedEventFilter<TradeFactorySetEvent>;

export interface IUniswapV2Swapper extends BaseContract {
  contractName: 'IUniswapV2Swapper';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapV2SwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTORY(overrides?: CallOverrides): Promise<[string]>;

    ROUTER(overrides?: CallOverrides): Promise<[string]>;

    SWAPPER_TYPE(overrides?: CallOverrides): Promise<[number]>;

    setTradeFactory(_tradeFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    swap(
      _receiver: string,
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  FACTORY(overrides?: CallOverrides): Promise<string>;

  ROUTER(overrides?: CallOverrides): Promise<string>;

  SWAPPER_TYPE(overrides?: CallOverrides): Promise<number>;

  setTradeFactory(_tradeFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  swap(
    _receiver: string,
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    _minAmountOut: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FACTORY(overrides?: CallOverrides): Promise<string>;

    ROUTER(overrides?: CallOverrides): Promise<string>;

    SWAPPER_TYPE(overrides?: CallOverrides): Promise<number>;

    setTradeFactory(_tradeFactory: string, overrides?: CallOverrides): Promise<void>;

    swap(
      _receiver: string,
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'TradeFactorySet(address)'(_tradeFactory?: null): TradeFactorySetEventFilter;
    TradeFactorySet(_tradeFactory?: null): TradeFactorySetEventFilter;
  };

  estimateGas: {
    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    SWAPPER_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    setTradeFactory(_tradeFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    swap(
      _receiver: string,
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SWAPPER_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTradeFactory(_tradeFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    swap(
      _receiver: string,
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
