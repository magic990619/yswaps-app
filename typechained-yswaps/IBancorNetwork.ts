/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IBancorNetworkInterface extends utils.Interface {
  contractName: 'IBancorNetwork';
  functions: {
    'conversionPath(address,address)': FunctionFragment;
    'convert(address[],uint256,uint256)': FunctionFragment;
    'convertByPath(address[],uint256,uint256,address,address,uint256)': FunctionFragment;
    'rateByPath(address[],uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'conversionPath', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'convert', values: [string[], BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertByPath', values: [string[], BigNumberish, BigNumberish, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rateByPath', values: [string[], BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'conversionPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertByPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rateByPath', data: BytesLike): Result;

  events: {};
}

export interface IBancorNetwork extends BaseContract {
  contractName: 'IBancorNetwork';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBancorNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    conversionPath(_sourceToken: string, _targetToken: string, overrides?: CallOverrides): Promise<[string[]]>;

    convert(
      path: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rateByPath(_path: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  conversionPath(_sourceToken: string, _targetToken: string, overrides?: CallOverrides): Promise<string[]>;

  convert(
    path: string[],
    amount: BigNumberish,
    minReturn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertByPath(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rateByPath(_path: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    conversionPath(_sourceToken: string, _targetToken: string, overrides?: CallOverrides): Promise<string[]>;

    convert(path: string[], amount: BigNumberish, minReturn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateByPath(_path: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    conversionPath(_sourceToken: string, _targetToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      path: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rateByPath(_path: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    conversionPath(_sourceToken: string, _targetToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      path: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rateByPath(_path: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
