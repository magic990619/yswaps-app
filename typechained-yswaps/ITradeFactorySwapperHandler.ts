/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ITradeFactorySwapperHandlerInterface extends utils.Interface {
  contractName: 'ITradeFactorySwapperHandler';
  functions: {
    'addSwappers(address[])': FunctionFragment;
    'isSwapper(address)': FunctionFragment;
    'removeSwappers(address[])': FunctionFragment;
    'setStrategySyncSwapper(address,address)': FunctionFragment;
    'strategySyncSwapper(address)': FunctionFragment;
    'swapperStrategies(address)': FunctionFragment;
    'swappers()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addSwappers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'isSwapper', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeSwappers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'setStrategySyncSwapper', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'strategySyncSwapper', values: [string]): string;
  encodeFunctionData(functionFragment: 'swapperStrategies', values: [string]): string;
  encodeFunctionData(functionFragment: 'swappers', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addSwappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSwappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategySyncSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategySyncSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapperStrategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swappers', data: BytesLike): Result;

  events: {};
}

export interface ITradeFactorySwapperHandler extends BaseContract {
  contractName: 'ITradeFactorySwapperHandler';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITradeFactorySwapperHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<[boolean] & { _isSwapper: boolean }>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setStrategySyncSwapper(
      _strategy: string,
      _swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategySyncSwapper(_strategy: string, overrides?: CallOverrides): Promise<[string] & { _swapper: string }>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<[string[]] & { _strategies: string[] }>;

    swappers(overrides?: CallOverrides): Promise<[string[]] & { _swappersList: string[] }>;
  };

  addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  isSwapper(_swapper: string, overrides?: CallOverrides): Promise<boolean>;

  removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setStrategySyncSwapper(
    _strategy: string,
    _swapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategySyncSwapper(_strategy: string, overrides?: CallOverrides): Promise<string>;

  swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<string[]>;

  swappers(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    addSwappers(__swappers: string[], overrides?: CallOverrides): Promise<void>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<boolean>;

    removeSwappers(__swappers: string[], overrides?: CallOverrides): Promise<void>;

    setStrategySyncSwapper(_strategy: string, _swapper: string, overrides?: CallOverrides): Promise<void>;

    strategySyncSwapper(_strategy: string, overrides?: CallOverrides): Promise<string>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<string[]>;

    swappers(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setStrategySyncSwapper(_strategy: string, _swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    strategySyncSwapper(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<BigNumber>;

    swappers(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setStrategySyncSwapper(
      _strategy: string,
      _swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategySyncSwapper(_strategy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
