/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IOneInchExchange {
  export type SwapDescriptionStruct = {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
    permit: BytesLike;
  };

  export type SwapDescriptionStructOutput = [string, string, string, string, BigNumber, BigNumber, BigNumber, string] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumber;
    minReturnAmount: BigNumber;
    flags: BigNumber;
    permit: string;
  };
}

export interface IOneInchExchangeInterface extends utils.Interface {
  contractName: 'IOneInchExchange';
  functions: {
    'discountedSwap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)': FunctionFragment;
    'swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)': FunctionFragment;
    'unoswap(address,uint256,uint256,bytes32[])': FunctionFragment;
    'unoswapWithPermit(address,uint256,uint256,bytes32[],bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'discountedSwap', values: [string, IOneInchExchange.SwapDescriptionStruct, BytesLike]): string;
  encodeFunctionData(functionFragment: 'swap', values: [string, IOneInchExchange.SwapDescriptionStruct, BytesLike]): string;
  encodeFunctionData(functionFragment: 'unoswap', values: [string, BigNumberish, BigNumberish, BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'unoswapWithPermit', values: [string, BigNumberish, BigNumberish, BytesLike[], BytesLike]): string;

  decodeFunctionResult(functionFragment: 'discountedSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unoswap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unoswapWithPermit', data: BytesLike): Result;

  events: {
    'Swapped(address,address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Swapped'): EventFragment;
}

export type SwappedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    sender: string;
    srcToken: string;
    dstToken: string;
    dstReceiver: string;
    spentAmount: BigNumber;
    returnAmount: BigNumber;
  }
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface IOneInchExchange extends BaseContract {
  contractName: 'IOneInchExchange';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOneInchExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    discountedSwap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  discountedSwap(
    caller: string,
    desc: IOneInchExchange.SwapDescriptionStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    caller: string,
    desc: IOneInchExchange.SwapDescriptionStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unoswap(
    srcToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    arg3: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unoswapWithPermit(
    srcToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    pools: BytesLike[],
    permit: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    discountedSwap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        returnAmount: BigNumber;
        gasLeft: BigNumber;
        chiSpent: BigNumber;
      }
    >;

    swap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { returnAmount: BigNumber; gasLeft: BigNumber }>;

    unoswap(srcToken: string, amount: BigNumberish, minReturn: BigNumberish, arg3: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'Swapped(address,address,address,address,uint256,uint256)'(
      sender?: null,
      srcToken?: null,
      dstToken?: null,
      dstReceiver?: null,
      spentAmount?: null,
      returnAmount?: null
    ): SwappedEventFilter;
    Swapped(sender?: null, srcToken?: null, dstToken?: null, dstReceiver?: null, spentAmount?: null, returnAmount?: null): SwappedEventFilter;
  };

  estimateGas: {
    discountedSwap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    discountedSwap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      caller: string,
      desc: IOneInchExchange.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
