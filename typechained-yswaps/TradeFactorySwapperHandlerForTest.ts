/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface TradeFactorySwapperHandlerForTestInterface extends utils.Interface {
  contractName: 'TradeFactorySwapperHandlerForTest';
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MASTER_ADMIN()': FunctionFragment;
    'SWAPPER_ADDER()': FunctionFragment;
    'SWAPPER_SETTER()': FunctionFragment;
    'addSwapperInternal(address)': FunctionFragment;
    'addSwapperToStrategyInternal(address,address)': FunctionFragment;
    'addSwappers(address[])': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isSwapper(address)': FunctionFragment;
    'removeSwapperFromStrategyInternal(address,address)': FunctionFragment;
    'removeSwapperInternal(address)': FunctionFragment;
    'removeSwappers(address[])': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setStrategySyncSwapper(address,address)': FunctionFragment;
    'strategySyncSwapper(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'swapperStrategies(address)': FunctionFragment;
    'swappers()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_ADMIN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SWAPPER_ADDER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SWAPPER_SETTER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addSwapperInternal', values: [string]): string;
  encodeFunctionData(functionFragment: 'addSwapperToStrategyInternal', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'addSwappers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'isSwapper', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeSwapperFromStrategyInternal', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'removeSwapperInternal', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeSwappers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'setStrategySyncSwapper', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'strategySyncSwapper', values: [string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'swapperStrategies', values: [string]): string;
  encodeFunctionData(functionFragment: 'swappers', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_ADMIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SWAPPER_ADDER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SWAPPER_SETTER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSwapperInternal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSwapperToStrategyInternal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSwappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSwapperFromStrategyInternal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSwapperInternal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSwappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategySyncSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategySyncSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapperStrategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swappers', data: BytesLike): Result;

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<[string, string, string], { role: string; previousAdminRole: string; newAdminRole: string }>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<[string, string, string], { role: string; account: string; sender: string }>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<[string, string, string], { role: string; account: string; sender: string }>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TradeFactorySwapperHandlerForTest extends BaseContract {
  contractName: 'TradeFactorySwapperHandlerForTest';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradeFactorySwapperHandlerForTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MASTER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    SWAPPER_ADDER(overrides?: CallOverrides): Promise<[string]>;

    SWAPPER_SETTER(overrides?: CallOverrides): Promise<[string]>;

    addSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    addSwapperToStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<[boolean] & { _isSwapper: boolean }>;

    removeSwapperFromStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setStrategySyncSwapper(
      _strategy: string,
      _swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategySyncSwapper(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<[string[]] & { _strategies: string[] }>;

    swappers(overrides?: CallOverrides): Promise<[string[]] & { _swappersList: string[] }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MASTER_ADMIN(overrides?: CallOverrides): Promise<string>;

  SWAPPER_ADDER(overrides?: CallOverrides): Promise<string>;

  SWAPPER_SETTER(overrides?: CallOverrides): Promise<string>;

  addSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addSwapperToStrategyInternal(
    _swapper: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isSwapper(_swapper: string, overrides?: CallOverrides): Promise<boolean>;

  removeSwapperFromStrategyInternal(
    _swapper: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setStrategySyncSwapper(
    _strategy: string,
    _swapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategySyncSwapper(arg0: string, overrides?: CallOverrides): Promise<string>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<string[]>;

  swappers(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MASTER_ADMIN(overrides?: CallOverrides): Promise<string>;

    SWAPPER_ADDER(overrides?: CallOverrides): Promise<string>;

    SWAPPER_SETTER(overrides?: CallOverrides): Promise<string>;

    addSwapperInternal(_swapper: string, overrides?: CallOverrides): Promise<void>;

    addSwapperToStrategyInternal(_swapper: string, _strategy: string, overrides?: CallOverrides): Promise<void>;

    addSwappers(__swappers: string[], overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<boolean>;

    removeSwapperFromStrategyInternal(_swapper: string, _strategy: string, overrides?: CallOverrides): Promise<void>;

    removeSwapperInternal(_swapper: string, overrides?: CallOverrides): Promise<void>;

    removeSwappers(__swappers: string[], overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    setStrategySyncSwapper(_strategy: string, _swapper: string, overrides?: CallOverrides): Promise<void>;

    strategySyncSwapper(arg0: string, overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<string[]>;

    swappers(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    SWAPPER_ADDER(overrides?: CallOverrides): Promise<BigNumber>;

    SWAPPER_SETTER(overrides?: CallOverrides): Promise<BigNumber>;

    addSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addSwapperToStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeSwapperFromStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setStrategySyncSwapper(_strategy: string, _swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    strategySyncSwapper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<BigNumber>;

    swappers(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SWAPPER_ADDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SWAPPER_SETTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    addSwapperToStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSwapper(_swapper: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSwapperFromStrategyInternal(
      _swapper: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapperInternal(_swapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    removeSwappers(__swappers: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setStrategySyncSwapper(
      _strategy: string,
      _swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategySyncSwapper(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapperStrategies(_swapper: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
