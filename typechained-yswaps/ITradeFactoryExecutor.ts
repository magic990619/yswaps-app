/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace ITradeFactoryExecutor {
  export type AsyncTradeExecutionDetailsStruct = {
    _strategy: string;
    _tokenIn: string;
    _tokenOut: string;
    _amount: BigNumberish;
    _minAmountOut: BigNumberish;
  };

  export type AsyncTradeExecutionDetailsStructOutput = [string, string, string, BigNumber, BigNumber] & {
    _strategy: string;
    _tokenIn: string;
    _tokenOut: string;
    _amount: BigNumber;
    _minAmountOut: BigNumber;
  };

  export type SyncTradeExecutionDetailsStruct = {
    _tokenIn: string;
    _tokenOut: string;
    _amountIn: BigNumberish;
    _maxSlippage: BigNumberish;
  };

  export type SyncTradeExecutionDetailsStructOutput = [string, string, BigNumber, BigNumber] & {
    _tokenIn: string;
    _tokenOut: string;
    _amountIn: BigNumber;
    _maxSlippage: BigNumber;
  };
}

export interface ITradeFactoryExecutorInterface extends utils.Interface {
  contractName: 'ITradeFactoryExecutor';
  functions: {
    'execute((address,address,address,uint256,uint256),address,bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'execute', values: [ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct, string, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;

  events: {
    'AsyncTradeExecuted(uint256,address)': EventFragment;
    'MultipleAsyncTradeExecuted(uint256[],address)': EventFragment;
    'SyncTradeExecuted(address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AsyncTradeExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MultipleAsyncTradeExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SyncTradeExecuted'): EventFragment;
}

export type AsyncTradeExecutedEvent = TypedEvent<[BigNumber, string], { _receivedAmount: BigNumber; _swapper: string }>;

export type AsyncTradeExecutedEventFilter = TypedEventFilter<AsyncTradeExecutedEvent>;

export type MultipleAsyncTradeExecutedEvent = TypedEvent<[BigNumber[], string], { _receivedAmount: BigNumber[]; _swapper: string }>;

export type MultipleAsyncTradeExecutedEventFilter = TypedEventFilter<MultipleAsyncTradeExecutedEvent>;

export type SyncTradeExecutedEvent = TypedEvent<
  [string, BigNumber, string],
  { _strategy: string; _receivedAmount: BigNumber; _swapper: string }
>;

export type SyncTradeExecutedEventFilter = TypedEventFilter<SyncTradeExecutedEvent>;

export interface ITradeFactoryExecutor extends BaseContract {
  contractName: 'ITradeFactoryExecutor';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITradeFactoryExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'execute((address,address,address,uint256,uint256),address,bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct,
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'execute((address,address,uint256,uint256),bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.SyncTradeExecutionDetailsStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'execute((address,address,address,uint256,uint256)[],address,bytes)'(
      _tradesExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct[],
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  'execute((address,address,address,uint256,uint256),address,bytes)'(
    _tradeExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct,
    _swapper: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'execute((address,address,uint256,uint256),bytes)'(
    _tradeExecutionDetails: ITradeFactoryExecutor.SyncTradeExecutionDetailsStruct,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'execute((address,address,address,uint256,uint256)[],address,bytes)'(
    _tradesExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct[],
    _swapper: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    'execute((address,address,address,uint256,uint256),address,bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct,
      _swapper: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'execute((address,address,uint256,uint256),bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.SyncTradeExecutionDetailsStruct,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'execute((address,address,address,uint256,uint256)[],address,bytes)'(
      _tradesExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct[],
      _swapper: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AsyncTradeExecuted(uint256,address)'(_receivedAmount?: null, _swapper?: null): AsyncTradeExecutedEventFilter;
    AsyncTradeExecuted(_receivedAmount?: null, _swapper?: null): AsyncTradeExecutedEventFilter;

    'MultipleAsyncTradeExecuted(uint256[],address)'(_receivedAmount?: null, _swapper?: null): MultipleAsyncTradeExecutedEventFilter;
    MultipleAsyncTradeExecuted(_receivedAmount?: null, _swapper?: null): MultipleAsyncTradeExecutedEventFilter;

    'SyncTradeExecuted(address,uint256,address)'(
      _strategy?: string | null,
      _receivedAmount?: null,
      _swapper?: string | null
    ): SyncTradeExecutedEventFilter;
    SyncTradeExecuted(_strategy?: string | null, _receivedAmount?: null, _swapper?: string | null): SyncTradeExecutedEventFilter;
  };

  estimateGas: {
    'execute((address,address,address,uint256,uint256),address,bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct,
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'execute((address,address,uint256,uint256),bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.SyncTradeExecutionDetailsStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'execute((address,address,address,uint256,uint256)[],address,bytes)'(
      _tradesExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct[],
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'execute((address,address,address,uint256,uint256),address,bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct,
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'execute((address,address,uint256,uint256),bytes)'(
      _tradeExecutionDetails: ITradeFactoryExecutor.SyncTradeExecutionDetailsStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'execute((address,address,address,uint256,uint256)[],address,bytes)'(
      _tradesExecutionDetails: ITradeFactoryExecutor.AsyncTradeExecutionDetailsStruct[],
      _swapper: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
